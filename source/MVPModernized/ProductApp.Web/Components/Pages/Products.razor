@page "/products"
@using ProductApp.Domain
@using ProductApp.Application
@using System.Timers
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Products - Product Manager</PageTitle>

<div class="container-fluid py-4">
    <!-- Header and Search -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="glass-card p-4">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <h2 class="mb-0">
                            <i class="bi bi-grid me-2"></i>Product Management
                        </h2>
                    </div>
                    <div class="col-md-6">
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" class="form-control" placeholder="Search products..."
                                   @bind="_searchTerm" @bind:event="oninput" @onkeyup="@(() => DebounceSearch())">
                            <button class="btn btn-primary" @onclick="ShowAddModal">
                                <i class="bi bi-plus-circle me-2"></i>Add Product
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Alerts -->
    @if (!string.IsNullOrEmpty(_successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle me-2"></i>@_successMessage
            <button type="button" class="btn-close" @onclick="@(() => _successMessage = string.Empty)"></button>
        </div>
    }
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>@_errorMessage
            <button type="button" class="btn-close" @onclick="@(() => _errorMessage = string.Empty)"></button>
        </div>
    }
    @if (_validationErrors != null && _validationErrors.Any())
    {
        <div class="alert alert-warning" role="alert">
            <h6 class="alert-heading">Validation Errors:</h6>
            @foreach (var error in _validationErrors)
            {
                <div class="mb-1">
                    <strong>@error.Key:</strong>
                    <ul class="mb-0">
                        @foreach (var msg in error.Value)
                        {
                            <li>@msg</li>
                        }
                    </ul>
                </div>
            }
        </div>
    }

    <!-- Products Grid -->
    <div class="row">
        <div class="col-12">
            <div class="glass-card p-4">
                @if (_isLoading)
                {
                    <!-- Loading Spinner -->
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (_products.Any())
                {
                    <!-- Products Table -->
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th @onclick="@(() => SortBy("Name"))" style="cursor: pointer;">
                                        Name
                                        @if (_sortColumn == "Name")
                                        {
                                            <i class="bi @(_sortAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                    </th>
                                    <th @onclick="@(() => SortBy("Price"))" style="cursor: pointer;">
                                        Price
                                        @if (_sortColumn == "Price")
                                        {
                                            <i class="bi @(_sortAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                    </th>
                                    <th @onclick="@(() => SortBy("Stock"))" style="cursor: pointer;">
                                        Stock
                                        @if (_sortColumn == "Stock")
                                        {
                                            <i class="bi @(_sortAscending ? "bi-sort-up" : "bi-sort-down")"></i>
                                        }
                                    </th>
                                    <th>Description</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var product in _products)
                                {
                                    <tr>
                                        <td>@product.Name</td>
                                        <td>@product.Price.ToString("C")</td>
                                        <td>@product.StockQuantity</td>
                                        <td>@product.Description</td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-primary me-2" @onclick="@(() => ShowEditModal(product))">
                                                <i class="bi bi-pencil"></i> Edit
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="@(() => ShowDeleteConfirm(product))">
                                                <i class="bi bi-trash"></i> Delete
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <!-- Empty State -->
                    <div class="text-center py-5">
                        <i class="bi bi-inbox display-1 text-muted"></i>
                        <p class="mt-3 text-muted">No products found</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Modal -->
@if (_showModal)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show d-block" tabindex="-1" role="dialog" aria-modal="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi @(_isEditMode ? "bi-pencil" : "bi-plus-circle") me-2"></i>
                        @(_isEditMode ? "Edit Product" : "Add New Product")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (_validationErrors != null && _validationErrors.Any())
                    {
                        <div class="alert alert-warning mb-3">
                            <h6 class="alert-heading">Please fix the following errors:</h6>
                            @foreach (var error in _validationErrors)
                            {
                                <div class="mb-1">
                                    <strong>@error.Key:</strong>
                                    <ul class="mb-0">
                                        @foreach (var msg in error.Value)
                                        {
                                            <li>@msg</li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                    }

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="productName" class="form-label">Product Name <span class="text-danger">*</span></label>
                                <input type="text" id="productName" class="form-control" @bind="_currentProduct.Name" placeholder="Enter product name" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="productPrice" class="form-label">Price <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" id="productPrice" step="0.01" min="0" class="form-control" @bind="_currentProduct.Price" placeholder="0.00" />
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="productStock" class="form-label">Stock Quantity <span class="text-danger">*</span></label>
                                <input type="number" id="productStock" min="0" class="form-control" @bind="_currentProduct.StockQuantity" placeholder="0" />
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="productDescription" class="form-label">Description</label>
                        <textarea id="productDescription" class="form-control" rows="4" @bind="_currentProduct.Description" placeholder="Enter product description (optional)"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                        <i class="bi bi-x-circle me-2"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="SaveProduct">
                        <i class="bi @(_isEditMode ? "bi-check-circle" : "bi-plus-circle") me-2"></i>
                        @(_isEditMode ? "Update Product" : "Add Product")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (_showDeleteConfirm)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show d-block" tabindex="-1" role="dialog" aria-modal="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle text-warning me-2"></i>Confirm Delete
                    </h5>
                    <button type="button" class="btn-close" @onclick="@(() => _showDeleteConfirm = false)" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-trash text-danger display-6 me-3"></i>
                        <div>
                            <p class="mb-2">Are you sure you want to delete this product?</p>
                            <p class="mb-0"><strong>"@_productToDelete?.Name"</strong></p>
                            <small class="text-muted">This action cannot be undone.</small>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="@(() => _showDeleteConfirm = false)">
                        <i class="bi bi-x-circle me-2"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteProduct">
                        <i class="bi bi-trash me-2"></i>Delete Product
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Inject] private IProductService ProductService { get; set; } = default!;
    [Inject] private ILogger<Products> Logger { get; set; } = default!;

    private List<ProductDto> _products = new();
    private CreateProductDto _currentProduct = new();
    private ProductDto? _productToDelete;
    private int _editProductId = 0;
    private string _searchTerm = string.Empty;
    private bool _isLoading = false;
    private bool _showModal = false;
    private bool _showDeleteConfirm = false;
    private bool _isEditMode = false;
    private string _successMessage = string.Empty;
    private string _errorMessage = string.Empty;
    private Dictionary<string, List<string>> _validationErrors = new();
    private string _sortColumn = "Name";
    private bool _sortAscending = true;
    private Timer? _debounceTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            var result = string.IsNullOrWhiteSpace(_searchTerm)
                ? await ProductService.GetAllProductsAsync()
                : await ProductService.SearchProductsAsync(_searchTerm);

            if (result.IsSuccess && result.Data != null)
            {
                _products = result.Data;
                ApplySorting();
            }
            else
            {
                _errorMessage = result.ErrorMessage ?? "Failed to load products";
                Logger.LogError("Failed to load products: {Error}", result.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Exception loading products: {ex.Message}";
            Logger.LogError(ex, "Exception loading products");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void DebounceSearch()
    {
        _debounceTimer?.Stop();
        _debounceTimer = new Timer(300);
        _debounceTimer.Elapsed += async (sender, e) =>
        {
            _debounceTimer?.Stop();
            await InvokeAsync(async () =>
            {
                await LoadProducts();
            });
        };
        _debounceTimer.Start();
    }

    private void ShowAddModal()
    {
        _currentProduct = new CreateProductDto();
        _isEditMode = false;
        _showModal = true;
        _validationErrors.Clear();
    }

    private void ShowEditModal(ProductDto product)
    {
        _currentProduct = new CreateProductDto
        {
            Name = product.Name,
            Price = product.Price,
            Description = product.Description,
            StockQuantity = product.StockQuantity
        };
        _editProductId = product.Id;
        _isEditMode = true;
        _showModal = true;
        _validationErrors.Clear();
    }

    private void CloseModal()
    {
        _showModal = false;
        _currentProduct = new CreateProductDto();
        _editProductId = 0;
        _validationErrors.Clear();
    }

    private async Task SaveProduct()
    {
        try
        {
            Result<ProductDto> result;

            if (_isEditMode)
            {
                var updateDto = new UpdateProductDto
                {
                    Id = _editProductId,
                    Name = _currentProduct.Name,
                    Price = _currentProduct.Price,
                    Description = _currentProduct.Description,
                    StockQuantity = _currentProduct.StockQuantity
                };
                result = await ProductService.UpdateProductAsync(updateDto);
            }
            else
            {
                result = await ProductService.CreateProductAsync(_currentProduct);
            }

            if (result.IsSuccess)
            {
                _successMessage = _isEditMode ? "Product updated successfully!" : "Product added successfully!";
                CloseModal();
                await LoadProducts();
            }
            else if (result.HasValidationErrors)
            {
                _validationErrors = result.ValidationErrors;
            }
            else
            {
                _errorMessage = result.ErrorMessage ?? "Failed to save product";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
            Logger.LogError(ex, "Error saving product");
        }
    }

    private void ShowDeleteConfirm(ProductDto product)
    {
        _productToDelete = product;
        _showDeleteConfirm = true;
    }

    private async Task DeleteProduct()
    {
        if (_productToDelete != null)
        {
            try
            {
                var result = await ProductService.DeleteProductAsync(_productToDelete.Id);
                if (result.IsSuccess)
                {
                    _successMessage = "Product deleted successfully!";
                    await LoadProducts();
                }
                else
                {
                    _errorMessage = result.ErrorMessage ?? "Failed to delete product";
                }
            }
            catch (Exception ex)
            {
                _errorMessage = $"An error occurred while deleting: {ex.Message}";
                Logger.LogError(ex, "Error deleting product {ProductId}", _productToDelete.Id);
            }
        }
        _showDeleteConfirm = false;
        _productToDelete = null;
    }

    private void SortBy(string column)
    {
        if (_sortColumn == column)
            _sortAscending = !_sortAscending;
        else
        {
            _sortColumn = column;
            _sortAscending = true;
        }
        ApplySorting();
    }

    private void ApplySorting()
    {
        _products = _sortColumn switch
        {
            "Name" => _sortAscending
                ? _products.OrderBy(p => p.Name).ToList()
                : _products.OrderByDescending(p => p.Name).ToList(),
            "Price" => _sortAscending
                ? _products.OrderBy(p => p.Price).ToList()
                : _products.OrderByDescending(p => p.Price).ToList(),
            "Stock" => _sortAscending
                ? _products.OrderBy(p => p.StockQuantity).ToList()
                : _products.OrderByDescending(p => p.StockQuantity).ToList(),
            _ => _products
        };
    }

    public void Dispose()
    {
        _debounceTimer?.Dispose();
    }
}