name: MVPModernized CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'source/MVPModernized/**'
      - '.github/workflows/mvp-modernized-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'source/MVPModernized/**'
      - '.github/workflows/mvp-modernized-ci.yml'
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'source/MVPModernized'
  SOLUTION_FILE: 'source/MVPModernized/MVPModernized.sln'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Display .NET information
      run: dotnet --info

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: Build solution
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    - name: Run Unit Tests
      run: |
        dotnet test ${{ env.PROJECT_PATH }}/ProductApp.Tests/ProductApp.Tests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger "trx;LogFileName=unit-test-results.trx" \
          --logger "console;verbosity=detailed" \
          --collect:"XPlat Code Coverage" \
          --blame \
          --blame-hang-timeout 5m

    # Install Playwright browsers before running E2E tests
    - name: Build E2E Tests Project
      run: dotnet build ${{ env.PROJECT_PATH }}/ProductApp.Tests.E2E/ProductApp.Tests.E2E.csproj --configuration Release

    - name: Install Playwright Browsers (Windows)
      if: runner.os == 'Windows'
      run: |
        cd ${{ env.PROJECT_PATH }}/ProductApp.Tests.E2E
        pwsh bin/Release/net9.0/playwright.ps1 install
      shell: pwsh

    - name: Install Playwright Browsers (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        cd ${{ env.PROJECT_PATH }}/ProductApp.Tests.E2E
        pwsh bin/Release/net9.0/playwright.ps1 install
      shell: pwsh

    - name: Run E2E Tests
      run: |
        dotnet test ${{ env.PROJECT_PATH }}/ProductApp.Tests.E2E/ProductApp.Tests.E2E.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger "trx;LogFileName=e2e-test-results.trx" \
          --logger "console;verbosity=detailed" \
          --collect:"XPlat Code Coverage" \
          --blame \
          --blame-hang-timeout 10m
      env:
        ASPNETCORE_ENVIRONMENT: Development
        PLAYWRIGHT_BROWSERS_PATH: 0

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: |
          **/*.trx
          **/TestResults/**/*.coverage
          **/TestResults/**/*.xml
        retention-days: 30

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-${{ matrix.os }}
        path: '**/TestResults/**/coverage.cobertura.xml'
        retention-days: 30

  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build for analysis
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Debug --no-restore

    - name: Run .NET Format check
      run: |
        dotnet format ${{ env.PROJECT_PATH }} --verify-no-changes --verbosity diagnostic || true

    - name: Run Code Analysis
      run: |
        dotnet build ${{ env.PROJECT_PATH }} --configuration Release \
          /p:TreatWarningsAsErrors=false \
          /p:EnableNETAnalyzers=true \
          /p:AnalysisLevel=latest \
          /p:EnforceCodeStyleInBuild=true

  publish-artifacts:
    name: Publish Build Artifacts
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Publish Web Application
      run: |
        dotnet publish ${{ env.PROJECT_PATH }}/ProductApp.Web/ProductApp.Web.csproj \
          --configuration Release \
          --output ./publish/web \
          --runtime linux-x64 \
          --self-contained false

    - name: Publish Domain Library
      run: |
        dotnet publish ${{ env.PROJECT_PATH }}/ProductApp.Domain/ProductApp.Domain.csproj \
          --configuration Release \
          --output ./publish/domain

    - name: Publish Application Library
      run: |
        dotnet publish ${{ env.PROJECT_PATH }}/ProductApp.Application/ProductApp.Application.csproj \
          --configuration Release \
          --output ./publish/application

    - name: Publish Infrastructure Library
      run: |
        dotnet publish ${{ env.PROJECT_PATH }}/ProductApp.Infrastructure/ProductApp.Infrastructure.csproj \
          --configuration Release \
          --output ./publish/infrastructure

    - name: Upload Web Application artifact
      uses: actions/upload-artifact@v4
      with:
        name: web-application
        path: ./publish/web
        retention-days: 90

    - name: Upload Libraries artifact
      uses: actions/upload-artifact@v4
      with:
        name: libraries
        path: |
          ./publish/domain
          ./publish/application
          ./publish/infrastructure
        retention-days: 90

  test-report:
    name: Test Report Summary
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: always()
    
    steps:
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        merge-multiple: true

    - name: Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: 'Test Results'
        path: '**/*.trx'
        reporter: 'dotnet-trx'
        fail-on-error: false

  notify-status:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build-and-test, code-analysis]
    if: always()
    
    steps:
    - name: Determine status
      id: status
      run: |
        if [[ "${{ needs.build-and-test.result }}" == "success" && "${{ needs.code-analysis.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "emoji=✅" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "emoji=❌" >> $GITHUB_OUTPUT
        fi

    - name: Create status comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ steps.status.outputs.status }}';
          const emoji = '${{ steps.status.outputs.emoji }}';
          const workflow_url = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          
          const body = `## ${emoji} MVPModernized CI Build Status: ${status.toUpperCase()}
          
          **Workflow Run:** [View Details](${workflow_url})
          **Commit:** \`${context.sha.substring(0, 7)}\`
          **Triggered by:** @${context.actor}
          
          | Check | Status |
          |-------|--------|
          | Build & Test | ${{ needs.build-and-test.result }} |
          | Code Analysis | ${{ needs.code-analysis.result }} |`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });